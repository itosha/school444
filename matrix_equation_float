#include <iostream>

using namespace std;

int** new_matrix(size_t n, size_t m)
{
    int **arr = new int*[n];
    size_t i;
    for (i=0; i < n; i++)
    {
        arr[i] = new int[m];
    }
    return arr;
}

float** float_new_matrix(size_t n, size_t m)
{
    float **arr = new float*[n];
    size_t i;
    for (i=0; i < n; i++)
    {
        arr[i] = new float[m];
    }
    return arr;
}

void free_matrix(int **arr, size_t n)
{
    size_t i;
    for (i=0; i < n; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}

void free_matrix(float **arr, size_t n)
{
    size_t i;
    for (i=0; i < n; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}


long long determinate(int **arr, size_t n)
{
    //cout<<"iteration "<<n<<endl;
    if (n == 3) {
        return
            arr[0][0] * arr[1][1] * arr[2][2] +
            arr[0][1] * arr[1][2] * arr[2][0] +
            arr[0][2] * arr[1][0] * arr[2][1] -
            arr[0][2] * arr[1][1] * arr[2][0] -
            arr[0][0] * arr[1][2] * arr[2][1] -
            arr[0][1] * arr[1][0] * arr[2][2];
    }
    n--;

    int **minor = new_matrix(n,n);
    size_t m, i, j, ii;
    bool sign = false;
    long long r = 0;
    for (m = 0; m <= n; m++)
    {
        for (i = 1; i <= n; i++)
        {
            ii = i - 1;
            for (j = 0; j < m; j++)
            {
                minor[ii][j] = arr[i][j];
            }
            for (j++; j <= n; j++)
            {
                minor[ii][j-1] = arr[i][j];
            }
        }

        if (sign) {
            r = r - arr[0][m] * determinate(minor, n);
        } else {
            r = r + arr[0][m] * determinate(minor, n);
        }
        sign = !sign;
    }
    free_matrix(minor, n);
    return r;
}

float** number1(int **A, int **B, size_t n1, size_t m2, size_t k)
{
    int x, t;
    float **C = float_new_matrix(n1, m2);
    for (int i = 0; i < n1; i++)
    {
        for (int q = 0; q < m2; q++)
        {
            x = 0;
            for (t = 0; t < k; t++)
            {
                x = x + A[t][i] * B[t][q];
            }
            C[i][q] = x;
        }
    }
    return C;
}


float** number2(int **A,int **B,size_t n1,size_t m2,size_t k)
{
    int x,t;
    float **C = float_new_matrix(n1,m2);
    x=0;
    for (int i = 0; i < n1; i++)
    {
        for (int q = 0; q < m2; q++)
        {
            for (t = 0; t < k; t++)
    {
        x = x + A[i][t] * B[q][t];
    }
        C[i][q]=x;
        x=0;
        }
    }
return C;
}

int** getmarixs(int **A, size_t n, size_t m)
{
    int i,j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            cin>>A[i][j];
        }
    }
    return A;
}

long long countdeterminate(int **arr, size_t n)
{
   long long r;

    if (n==1) {
        r = arr[0][0];
    }
    else if (n==2) {
        r = arr[0][0] * arr[1][1] - arr[0][1] * arr[1][0];
    }
    else {
        r = determinate(arr,n);
    }
    return r;
}

int** matr_dop(int **arr, size_t n)
{
    int **B = new_matrix(n,n);
    n--;
    int **minor = new_matrix(n,n);
    size_t i, j, ii, jj;

    for (ii = 0; ii <= n; ii++)
    {
        for (jj = 0; jj <= n; jj++)
        {
            for (i = 0; i < ii; i++)
            {
                for (j = 0; j < jj; j++)
                {
                    minor[i][j] = arr[i][j];
                    //cout<<"1"<<" ";
                }
                for (j++; j <= n; j++)
                {
                    minor[i][j-1] = arr[i][j];
                    //cout<<"2"<<" ";
                }
            }
            for (i++; i <= n; i++)
            {
                for (j = 0; j < jj; j++)
                {
                    minor[i-1][j] = arr[i][j];
                    //cout<<"3"<<" ";
                }
                for (j++; j <= n; j++)
                {
                    minor[i-1][j-1] = arr[i][j];
                    //cout<<"4"<<" ";
                }
            }
            //cout<<"1";
            B[ii][jj]=countdeterminate(minor,n);
            if ((ii + jj) % 2 == 1) {
                B[ii][jj] = B[ii][jj] * -1;
            }
            //cout<<B[ii][jj]<<"! ";
        }
    }
    return B;
}

float **number3(float **A,size_t n, size_t m, int k)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            A[i][j]=A[i][j]/k;
        }
    }
    return A;
}

void coutmatricx(float **A,size_t n,size_t m)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cout<<A[i][j]<<" ";
        }
    cout<<endl;
    }
}

int main()
{
    int t;
    cin>>t;
    size_t n1,m1,n2,m2;
    cout<<"Matrix dimension A: ";
    cin>>n1>>m1;
    cout<<"Matrix dimension B: ";
    cin>>n2>>m2;
    if (t==1)
    {
       if (n1!=n2) {
        cout<<"NO";
       }
       else
        {
            if (n1!=m1) {
            cout<<"I don't know how to do it";
            } else {
            int **A = new_matrix(n1,m1);
            A=getmarixs(A,n1,m1);
            t=countdeterminate(A,n1);
            if (t==0) {
            cout<<"I don't know how to do it";
            } else {
            int **B = new_matrix(n2,m2);
            B=getmarixs(B,n2,m2);
            float **C = float_new_matrix(m1,m2);
            A=matr_dop(A, n1);
            C=number1(A,B,m1,m2,n1);
            C=number3(C,m1,m2,t);
            coutmatricx(C,m1,m2);
            free_matrix(A, n1);
            free_matrix(B, n2);
            free_matrix(C, n1);
            }}
        }
    }
    else
    {
        if (m1!=m2) {
        cout<<"NO";
       }
       else
        {
            if (n1!=m1) {
            cout<<"I don't know how to do it";
            } else {
            int **A = new_matrix(n1,m1);
            A=getmarixs(A,n1,m1);
            t=countdeterminate(A,n1);
            if (t==0) {
            cout<<"I don't know how to do it";
            } else {
            int **B = new_matrix(n2,m2);
            B=getmarixs(B,n2,m2);
            float **C = float_new_matrix(m1,m2);
            A=matr_dop(A, n1);
            C=number2(B,A,n2,m1,n1);
            C=number3(C,n2,m1,t);
            coutmatricx(C,n2,m1);
            free_matrix(A, n1);
            free_matrix(B, n2);
            free_matrix(C, n2);
            }}
        }
    }

    return 0;
}
